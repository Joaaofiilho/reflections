Reflexões da Lição 2

O que acontece ao iniciar um repositório? Por que você precisa fazer isso?

	Cria-se uma pasta oculta denominada ".git" que serve para armazenar o
	histórico de commits. Criar um repositório é super importante para se ter
	o controle de versionamento e uma maior segurança caso algo dê errado no
	código.

Em que se difere a área de preparação do diretório de trabalho e do repositório?
Qual valor você acha que ela oferece?

	A diferença está que as coisas que estão na área de preparação não
	necessariamente estão no repositório, então com essa ideia é possível
	concluir que já que os arquivos estão pendentes para serem enviados, o
	controle sobre esses arquivos fica bem maior, deixando livre a edição
	dos arquivos caso necessário.

Como você pode usar a área de preparação para garantir que tenha um commit por
alteração lógica?

	Pois com ela posso trabalhar em vários arquivos e fazer o commit de arquivo
	por arquivo, ou melhor, de alteração lógica por alteração lógica.

Quais são algumas das situações em que branches seriam úteis para manter seu
histórico organizado? Como branches ajudariam?

	Quando eu quero criar ou testar algo no meu projeto que não tenho certeza
	se vou de fato pôr na versão final. Os branches permitiriam ao usuário
	fazer esses testes ou mudanças à vontade sem prejudicar o trabalho final.

Como os diagramas ajudam a visualizar a estrutura de branches?

	Eles dão uma visão geral de como os branchs então organizados. Podendo ser
	possível ver commits que nunca serão vistos pelo projeto (Head desanexed),
	todos os branchs que já foram criados, incluindo em que parte do código e
	até onde foram.

Qual é o resultado da mesclagem de dois branches? Por que o representamos no
diagrama dessa forma?

	O resultado é um commit logo depois da ponta do Branch principal, commit
	esse que engloba todas os commits feitos no Branch principal e os commits
	realizados no Branch que você está fazendo Merge. A representação é feita
	dessa forma por conta da organização e controle. Com Branchs fica mais
	fácil dividir o trabalho quando se está trabalhando em equipe e ainda por
	cima é muito fácil trabalhar uma possível nova funcionalidade sem atrapalhar
	em nada o andamento do projeto.

Quais são os prós e contras da mesclagem automática do Git vs. sempre fazer
mesclagens manualmente?

	Ao se fazer uma mesclagem automática o usuário não precisa gastar seu tempo
	analizando código para descobrir o que deu errado, então com mais tempo mais
	trabalho é realizado e a progressão de um projeto acelera. Porém, se o Git
	decidisse sozinho o que fazer quando dois códigos entram em conflito, isso
	seria bastante frustante, já que poderia ocasionar em muitos erros. Então,
	mesmo que seja trabalhoso ver o que deu de errado em um conflito, ainda é
	algo essencial para o correto andamento do projeto.